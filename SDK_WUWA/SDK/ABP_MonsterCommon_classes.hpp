#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_MonsterCommon

#include "Basic.hpp"

#include "KuroAnim_structs.hpp"
#include "KuroAnim_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_MonsterCommon.ABP_MonsterCommon_C
// 0x2670 (0x2E90 - 0x0820)
#pragma pack(push, 0x1)
class alignas(0x10) UABP_MonsterCommon_C : public UKuroAnimInstanceMonster
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0820(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_SightLock                    AnimGraphNode_SightLock;                           // 0x0828(0x01C0)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x09E8(0x0138)()
	struct FAnimNode_BoneRotateToLocation         AnimGraphNode_BoneRotateToLocation;                // 0x0B20(0x0128)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0C48(0x0038)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_26;                 // 0x0C80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_25;                 // 0x0CA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_24;                 // 0x0CD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_23;                 // 0x0CF8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_22;                 // 0x0D20(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_21;                 // 0x0D48(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0D70(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_14;                      // 0x0DA0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x0DD8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_13;                      // 0x0E68(0x0038)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0EA0(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_12;                      // 0x0ED0(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_4;                      // 0x0F08(0x0148)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1050(0x0060)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_20;                 // 0x10B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_19;                 // 0x10D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x1100(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x1128(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x1150(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x1178(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x11A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x11C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x11F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x1218(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x1240(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x1268(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x12F8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x1330(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x13C0(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x13F8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x1488(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x14C0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x1550(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x1588(0x0090)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x1618(0x0090)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x16A8(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x1758(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x1790(0x0148)()
	uint8                                         Pad_38DB[0x8];                                     // 0x18D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x18E0(0x01B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x1A90(0x01B0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x1C40(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x1C70(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x1CA8(0x0148)()
	struct FAnimNode_Feedback                     AnimGraphNode_Feedback;                            // 0x1DF0(0x0268)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x2058(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x2078(0x0020)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x2098(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x2158(0x0060)()
	uint8                                         Pad_38DC[0x8];                                     // 0x21B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x21C0(0x01B0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x2370(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x2398(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x23C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x23E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x2410(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x2438(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x2460(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x2488(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x24B0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x2540(0x0038)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x2578(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x25B0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x2640(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x2678(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x2708(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x2740(0x0148)()
	uint8                                         Pad_38DD[0x8];                                     // 0x2888(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x2890(0x01B0)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x2A40(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x2A68(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x2A90(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x2AF0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x2B80(0x0038)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x2BB8(0x0030)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x2BE8(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x2C20(0x0148)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x2D68(0x0038)()
	class ATsBaseCharacter_C*                     As_Base_Character;                                 // 0x2DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSkeletonGroup                         Skeleton_Block_Info;                               // 0x2DA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFK_Shake_AssestData_C*                 FKShakeData;                                       // 0x2DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             NewEventDispatcher_0;                              // 0x2DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Increment;                                         // 0x2DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESightLockMode                                CameraMode;                                        // 0x2DE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DE[0x3];                                     // 0x2DE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Assist_Limit;                                      // 0x2DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Sight_Bone_Name;                                   // 0x2DEC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Begin_Bone_Name;                                   // 0x2DF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   End_Bone_Name;                                     // 0x2E04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeAlpha;                                        // 0x2E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShakeRange;                                        // 0x2E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPD_CharacterControllerData_C*>  HitMaterial;                                       // 0x2E18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ToughDecreaseValue;                                // 0x2E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38DF[0x4];                                     // 0x2E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CachedTagContainer;                                // 0x2E30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          TestFkBoolean;                                     // 0x2E50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38E0[0x7];                                     // 0x2E51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ShakeCurve;                                        // 0x2E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _S_Stari;                                          // 0x2E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38E1[0x7];                                     // 0x2E61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     _hSM_a;                                            // 0x2E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   Bone_Name;                                         // 0x2E70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38E2[0x4];                                     // 0x2E7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ABPLogicParams_C*                   Ts_____;                                           // 0x2E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void NewEventDispatcher_0__DelegateSignature();
	void ExecuteUbergraph_ABP_MonsterCommon(int32 EntryPoint);
	void TestFk();
	void OnComponentStart();
	void PlayShakeFX(int32 Section);
	void BlueprintInitializeAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_2DD95BC34A3508E4DF6823B128E6DE6A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_685FFA67426C7F34E7D82C870BE2E57B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_52DA74EB4EEB034345C1CFBA9BE15A1A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_7366C1E545187F21B80550B938A5DFC7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_4DEA819C457E35E72E5F48A5771FEFD9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_8284B9304DC1D9EB88D60CB5D436515F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_85596CB24819748E20B7E98B1D415C01();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_D3A4A6444A7DE3555091D4A82F1D79C8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_C8F75FDB4D43B0F22BC55386C196D222();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_941D22724432AEF11166288E517E2FBD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_FC2F40D248658AA0187D7C8352A6275A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_4CD09B1549F62595BCF402B26D20D1D3();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_CAA77B31439383A08DD9A684A49611B0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_121708674083B1DE98AABE9895CD6935();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_153A75684E72D893961594BC7BB4539D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_1818FB2944DC831E96348689BFC2E103();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_6AF484B4431B8C14FE283CB297B6B3EC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_148EAF7A4BDBB1686DADE7A597E0A76C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_TransitionResult_8FE4732440DE2B2FA8F0D19EE564E538();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_Feedback_51E4B51A468F1A65E6FF64A9A5F4B5CB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_MonsterCommon_AnimGraphNode_BoneRotateToLocation_0CC2D58648A93DA1CC947D9EA2BA1910();
	void ______Tag();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void IKAndFk(const struct FPoseLink& InPose, struct FPoseLink* Param_IKAndFk);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_MonsterCommon_C">();
	}
	static class UABP_MonsterCommon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_MonsterCommon_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UABP_MonsterCommon_C) == 0x000010, "Wrong alignment on UABP_MonsterCommon_C");
static_assert(sizeof(UABP_MonsterCommon_C) == 0x002E90, "Wrong size on UABP_MonsterCommon_C");
static_assert(offsetof(UABP_MonsterCommon_C, UberGraphFrame) == 0x000820, "Member 'UABP_MonsterCommon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SightLock) == 0x000828, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SightLock' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_LinkedInputPose) == 0x0009E8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_BoneRotateToLocation) == 0x000B20, "Member 'UABP_MonsterCommon_C::AnimGraphNode_BoneRotateToLocation' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_Root_1) == 0x000C48, "Member 'UABP_MonsterCommon_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_26) == 0x000C80, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_26' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_25) == 0x000CA8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_25' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_24) == 0x000CD0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_24' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_23) == 0x000CF8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_23' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_22) == 0x000D20, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_22' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_21) == 0x000D48, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_21' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_UseCachedPose_3) == 0x000D70, "Member 'UABP_MonsterCommon_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_14) == 0x000DA0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_14' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_10) == 0x000DD8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_13) == 0x000E68, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_13' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_UseCachedPose_2) == 0x000EA0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_12) == 0x000ED0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_12' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateMachine_4) == 0x000F08, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateMachine_4' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_Slot_2) == 0x001050, "Member 'UABP_MonsterCommon_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_20) == 0x0010B0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_20' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_19) == 0x0010D8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_19' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_18) == 0x001100, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_17) == 0x001128, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_16) == 0x001150, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_15) == 0x001178, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_14) == 0x0011A0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_13) == 0x0011C8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_12) == 0x0011F0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_11) == 0x001218, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_10) == 0x001240, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_9) == 0x001268, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_11) == 0x0012F8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_8) == 0x001330, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_10) == 0x0013C0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_7) == 0x0013F8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_9) == 0x001488, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_6) == 0x0014C0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_8) == 0x001550, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_5) == 0x001588, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_4) == 0x001618, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_BlendListByBool) == 0x0016A8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_7) == 0x001758, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateMachine_3) == 0x001790, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SaveCachedPose_3) == 0x0018E0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SaveCachedPose_2) == 0x001A90, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_UseCachedPose_1) == 0x001C40, "Member 'UABP_MonsterCommon_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_6) == 0x001C70, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateMachine_2) == 0x001CA8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_Feedback) == 0x001DF0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_Feedback' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_ComponentToLocalSpace) == 0x002058, "Member 'UABP_MonsterCommon_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_LocalToComponentSpace) == 0x002078, "Member 'UABP_MonsterCommon_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_LinkedAnimLayer) == 0x002098, "Member 'UABP_MonsterCommon_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_Slot_1) == 0x002158, "Member 'UABP_MonsterCommon_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SaveCachedPose_1) == 0x0021C0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_9) == 0x002370, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_8) == 0x002398, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_7) == 0x0023C0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_6) == 0x0023E8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_5) == 0x002410, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_4) == 0x002438, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_3) == 0x002460, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_2) == 0x002488, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_3) == 0x0024B0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_5) == 0x002540, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_4) == 0x002578, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_2) == 0x0025B0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_3) == 0x002640, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer_1) == 0x002678, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_2) == 0x002708, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateMachine_1) == 0x002740, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SaveCachedPose) == 0x002890, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult_1) == 0x002A40, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_TransitionResult) == 0x002A68, "Member 'UABP_MonsterCommon_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_Slot) == 0x002A90, "Member 'UABP_MonsterCommon_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_SequencePlayer) == 0x002AF0, "Member 'UABP_MonsterCommon_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult_1) == 0x002B80, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_UseCachedPose) == 0x002BB8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateResult) == 0x002BE8, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_StateMachine) == 0x002C20, "Member 'UABP_MonsterCommon_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, AnimGraphNode_Root) == 0x002D68, "Member 'UABP_MonsterCommon_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, As_Base_Character) == 0x002DA0, "Member 'UABP_MonsterCommon_C::As_Base_Character' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Skeleton_Block_Info) == 0x002DA8, "Member 'UABP_MonsterCommon_C::Skeleton_Block_Info' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, FKShakeData) == 0x002DC8, "Member 'UABP_MonsterCommon_C::FKShakeData' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, NewEventDispatcher_0) == 0x002DD0, "Member 'UABP_MonsterCommon_C::NewEventDispatcher_0' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Increment) == 0x002DE0, "Member 'UABP_MonsterCommon_C::Increment' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, CameraMode) == 0x002DE4, "Member 'UABP_MonsterCommon_C::CameraMode' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Assist_Limit) == 0x002DE8, "Member 'UABP_MonsterCommon_C::Assist_Limit' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Sight_Bone_Name) == 0x002DEC, "Member 'UABP_MonsterCommon_C::Sight_Bone_Name' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Begin_Bone_Name) == 0x002DF8, "Member 'UABP_MonsterCommon_C::Begin_Bone_Name' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, End_Bone_Name) == 0x002E04, "Member 'UABP_MonsterCommon_C::End_Bone_Name' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, ShakeAlpha) == 0x002E10, "Member 'UABP_MonsterCommon_C::ShakeAlpha' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, ShakeRange) == 0x002E14, "Member 'UABP_MonsterCommon_C::ShakeRange' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, HitMaterial) == 0x002E18, "Member 'UABP_MonsterCommon_C::HitMaterial' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, ToughDecreaseValue) == 0x002E28, "Member 'UABP_MonsterCommon_C::ToughDecreaseValue' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, CachedTagContainer) == 0x002E30, "Member 'UABP_MonsterCommon_C::CachedTagContainer' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, TestFkBoolean) == 0x002E50, "Member 'UABP_MonsterCommon_C::TestFkBoolean' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, ShakeCurve) == 0x002E58, "Member 'UABP_MonsterCommon_C::ShakeCurve' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, _S_Stari) == 0x002E60, "Member 'UABP_MonsterCommon_C::_S_Stari' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, _hSM_a) == 0x002E68, "Member 'UABP_MonsterCommon_C::_hSM_a' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Bone_Name) == 0x002E70, "Member 'UABP_MonsterCommon_C::Bone_Name' has a wrong offset!");
static_assert(offsetof(UABP_MonsterCommon_C, Ts_____) == 0x002E80, "Member 'UABP_MonsterCommon_C::Ts_____' has a wrong offset!");

}


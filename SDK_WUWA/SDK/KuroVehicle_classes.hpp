#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroVehicle

#include "Basic.hpp"

#include "KuroGAS_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "KuroVehicle_structs.hpp"
#include "KuroAnim_classes.hpp"


namespace SDK
{

// Class KuroVehicle.KuroAnimInstanceVehicle
// 0x0070 (0x0770 - 0x0700)
class UKuroAnimInstanceVehicle final : public UKuroAnimInstance
{
public:
	uint8                                         Pad_1E82[0x8];                                     // 0x0700(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbpLogicParams*                        LogicParams;                                       // 0x0708(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKuroBaseVehicle*                       BaseVehicle;                                       // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0718(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntityId;                                          // 0x071C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutonomousProxy;                                // 0x0720(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E83[0x3];                                     // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0724(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E84[0xC];                                     // 0x0730(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsMovedLocation;                                  // 0x073C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E85[0xF];                                     // 0x073D(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Acceleration;                                      // 0x074C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorForward;                                      // 0x0758(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E86[0xC];                                     // 0x0764(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroAnimInstanceVehicle">();
	}
	static class UKuroAnimInstanceVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroAnimInstanceVehicle>();
	}
};
static_assert(alignof(UKuroAnimInstanceVehicle) == 0x000010, "Wrong alignment on UKuroAnimInstanceVehicle");
static_assert(sizeof(UKuroAnimInstanceVehicle) == 0x000770, "Wrong size on UKuroAnimInstanceVehicle");
static_assert(offsetof(UKuroAnimInstanceVehicle, LogicParams) == 0x000708, "Member 'UKuroAnimInstanceVehicle::LogicParams' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, BaseVehicle) == 0x000710, "Member 'UKuroAnimInstanceVehicle::BaseVehicle' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, DeltaTime) == 0x000718, "Member 'UKuroAnimInstanceVehicle::DeltaTime' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, EntityId) == 0x00071C, "Member 'UKuroAnimInstanceVehicle::EntityId' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, bIsAutonomousProxy) == 0x000720, "Member 'UKuroAnimInstanceVehicle::bIsAutonomousProxy' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, Velocity) == 0x000724, "Member 'UKuroAnimInstanceVehicle::Velocity' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, bIsMovedLocation) == 0x00073C, "Member 'UKuroAnimInstanceVehicle::bIsMovedLocation' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, Acceleration) == 0x00074C, "Member 'UKuroAnimInstanceVehicle::Acceleration' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, ActorForward) == 0x000758, "Member 'UKuroAnimInstanceVehicle::ActorForward' has a wrong offset!");

// Class KuroVehicle.KuroBaseVehicle
// 0x0020 (0x06A0 - 0x0680)
class AKuroBaseVehicle : public ABaseCharacter
{
public:
	class UKuroVehicleMovementComponent*          VehicleMovementComponent;                          // 0x0678(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             VehicleMovementModeChangedDelegate;                // 0x0680(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVehicleMovementUpdated;                          // 0x0690(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void K2_OnVehicleMovementModeChanged(EKuroVehicleMovementMode PrevMovementMode, EKuroVehicleMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_UpdateVehicleCustomMovement(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroBaseVehicle">();
	}
	static class AKuroBaseVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKuroBaseVehicle>();
	}
};
static_assert(alignof(AKuroBaseVehicle) == 0x000010, "Wrong alignment on AKuroBaseVehicle");
static_assert(sizeof(AKuroBaseVehicle) == 0x0006A0, "Wrong size on AKuroBaseVehicle");
static_assert(offsetof(AKuroBaseVehicle, VehicleMovementComponent) == 0x000678, "Member 'AKuroBaseVehicle::VehicleMovementComponent' has a wrong offset!");
static_assert(offsetof(AKuroBaseVehicle, VehicleMovementModeChangedDelegate) == 0x000680, "Member 'AKuroBaseVehicle::VehicleMovementModeChangedDelegate' has a wrong offset!");
static_assert(offsetof(AKuroBaseVehicle, OnVehicleMovementUpdated) == 0x000690, "Member 'AKuroBaseVehicle::OnVehicleMovementUpdated' has a wrong offset!");

// Class KuroVehicle.KuroVehicleMovementComponent
// 0x0300 (0x0450 - 0x0150)
class UKuroVehicleMovementComponent final : public UPawnMovementComponent
{
public:
	class AKuroBaseVehicle*                       VehicleOwner;                                      // 0x0150(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UShapeComponent*>                VehicleShapes;                                     // 0x0158(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FBoxSphereBounds                       VehicleShapeBounds;                                // 0x0168(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                VehicleShapeBoundsOffset;                          // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroVehicleMovementMode                      MovementMode;                                      // 0x0190(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomMovementMode;                                // 0x0191(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableScopedMovementUpdates : 1;                  // 0x0192(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRunPhysicsWithNoController : 1;                   // 0x0192(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E87[0x1];                                     // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAcceleration;                                   // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBrakeAcceleration;                              // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBackwardAcceleration;                           // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationVelocity;                                  // 0x01AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationAcceleration;                              // 0x01B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxFloatingSpeed;                                  // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatingFrictionFactor;                            // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForbidGravityDirectMove;                           // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E88[0x3];                                     // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuoyancyBalanceRatio;                              // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandedWaterDepthThreshold;                       // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafetyDepthTolerrance;                             // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSafetyDepthCheck;                                 // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E89[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWaterDiveDist;                                  // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBackwardSpeed;                                  // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFriction;                                       // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFriction;                                       // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraFrictionWhenExceedMaxSpeed;                   // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeed;                                  // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationYawAcceleration;                        // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotationYawAcceleration;                        // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotAngleCoef;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeedCoef;                                      // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotConstCoef;                                      // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotFrictionFactor;                                 // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticRotFriction;                                 // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotaryInertia;                                     // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedImpactFactor;                                 // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedImpactHorizontalFactor;                       // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationImpactFactor;                              // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExtrutionDistance;                              // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDepth;                                        // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOrientRotationToMovement : 1;                     // 0x022C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseControllerDesiredRotation : 1;                 // 0x022C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E8A[0x3];                                     // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationRate;                                      // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8B[0x8];                                     // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  LastUpdateRotation;                                // 0x0250(0x0010)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                LastUpdateLocation;                                // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastUpdateVelocity;                                // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               LastUpdateRotationVelocity;                        // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                PendingImpulseToApply;                             // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PendingForceToApply;                               // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               PendingRotImpluseToApply;                          // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         AnalogInputModifier;                               // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8C[0xB0];                                    // 0x02AC(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSimulationTimeStep;                             // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationIterations;                           // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationRotationIterations;                   // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithGeometry;                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithGeometryAsProxy;               // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithPawn;                          // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepenetrationWithPawnAsProxy;                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8D[0x10];                                    // 0x0378(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleRootMotionSourceGroup          CurrentRootMotion;                                 // 0x0388(0x0038)(Transient, NativeAccessSpecifierPublic)
	struct FRootMotionMovementParams              RootMotionParams;                                  // 0x03C0(0x0040)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AnimRootMotionVelocity;                            // 0x0400(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8E[0x24];                                    // 0x040C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDeferUpdateMoveComponent : 1;                     // 0x0430(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E8F[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        DeferredUpdatedMoveComponent;                      // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForbiddenTickPose;                                // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMovementInProgress : 1;                           // 0x0441(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1E90[0xE];                                     // 0x0442(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void IgnoreMoveFriction(float Duration);
	void InitVehicleShapes();
	void Kuro_SetGravityDirect(const struct FVector& InGravityDirect);
	void KuroShipping_HandlePassiveImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetMovementMode(EKuroVehicleMovementMode NewMovementMode, uint8 NewCustomMode);

	float GetMaxAcceleration() const;
	struct FVector Kuro_GetGravity() const;
	struct FVector Kuro_GetGravityDirect() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVehicleMovementComponent">();
	}
	static class UKuroVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroVehicleMovementComponent>();
	}
};
static_assert(alignof(UKuroVehicleMovementComponent) == 0x000010, "Wrong alignment on UKuroVehicleMovementComponent");
static_assert(sizeof(UKuroVehicleMovementComponent) == 0x000450, "Wrong size on UKuroVehicleMovementComponent");
static_assert(offsetof(UKuroVehicleMovementComponent, VehicleOwner) == 0x000150, "Member 'UKuroVehicleMovementComponent::VehicleOwner' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, VehicleShapes) == 0x000158, "Member 'UKuroVehicleMovementComponent::VehicleShapes' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, VehicleShapeBounds) == 0x000168, "Member 'UKuroVehicleMovementComponent::VehicleShapeBounds' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, VehicleShapeBoundsOffset) == 0x000184, "Member 'UKuroVehicleMovementComponent::VehicleShapeBoundsOffset' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MovementMode) == 0x000190, "Member 'UKuroVehicleMovementComponent::MovementMode' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, CustomMovementMode) == 0x000191, "Member 'UKuroVehicleMovementComponent::CustomMovementMode' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, GravityScale) == 0x000194, "Member 'UKuroVehicleMovementComponent::GravityScale' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxAcceleration) == 0x000198, "Member 'UKuroVehicleMovementComponent::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MinAcceleration) == 0x00019C, "Member 'UKuroVehicleMovementComponent::MinAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxBrakeAcceleration) == 0x0001A0, "Member 'UKuroVehicleMovementComponent::MaxBrakeAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxBackwardAcceleration) == 0x0001A4, "Member 'UKuroVehicleMovementComponent::MaxBackwardAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSpeed) == 0x0001A8, "Member 'UKuroVehicleMovementComponent::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationVelocity) == 0x0001AC, "Member 'UKuroVehicleMovementComponent::RotationVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationAcceleration) == 0x0001B8, "Member 'UKuroVehicleMovementComponent::RotationAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxFloatingSpeed) == 0x0001C4, "Member 'UKuroVehicleMovementComponent::MaxFloatingSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, FloatingFrictionFactor) == 0x0001C8, "Member 'UKuroVehicleMovementComponent::FloatingFrictionFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, ForbidGravityDirectMove) == 0x0001CC, "Member 'UKuroVehicleMovementComponent::ForbidGravityDirectMove' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, BuoyancyBalanceRatio) == 0x0001D0, "Member 'UKuroVehicleMovementComponent::BuoyancyBalanceRatio' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, StrandedWaterDepthThreshold) == 0x0001D4, "Member 'UKuroVehicleMovementComponent::StrandedWaterDepthThreshold' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, SafetyDepthTolerrance) == 0x0001D8, "Member 'UKuroVehicleMovementComponent::SafetyDepthTolerrance' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, bSafetyDepthCheck) == 0x0001DC, "Member 'UKuroVehicleMovementComponent::bSafetyDepthCheck' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxWaterDiveDist) == 0x0001E0, "Member 'UKuroVehicleMovementComponent::MaxWaterDiveDist' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxBackwardSpeed) == 0x0001E4, "Member 'UKuroVehicleMovementComponent::MaxBackwardSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MinFriction) == 0x0001E8, "Member 'UKuroVehicleMovementComponent::MinFriction' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxFriction) == 0x0001EC, "Member 'UKuroVehicleMovementComponent::MaxFriction' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, ExtraFrictionWhenExceedMaxSpeed) == 0x0001F0, "Member 'UKuroVehicleMovementComponent::ExtraFrictionWhenExceedMaxSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxRotationSpeed) == 0x0001F4, "Member 'UKuroVehicleMovementComponent::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxRotationYawAcceleration) == 0x0001F8, "Member 'UKuroVehicleMovementComponent::MaxRotationYawAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MinRotationYawAcceleration) == 0x0001FC, "Member 'UKuroVehicleMovementComponent::MinRotationYawAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotAngleCoef) == 0x000200, "Member 'UKuroVehicleMovementComponent::RotAngleCoef' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotSpeedCoef) == 0x000204, "Member 'UKuroVehicleMovementComponent::RotSpeedCoef' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotConstCoef) == 0x000208, "Member 'UKuroVehicleMovementComponent::RotConstCoef' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotFrictionFactor) == 0x00020C, "Member 'UKuroVehicleMovementComponent::RotFrictionFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, StaticRotFriction) == 0x000210, "Member 'UKuroVehicleMovementComponent::StaticRotFriction' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotaryInertia) == 0x000214, "Member 'UKuroVehicleMovementComponent::RotaryInertia' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, SpeedImpactFactor) == 0x000218, "Member 'UKuroVehicleMovementComponent::SpeedImpactFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, SpeedImpactHorizontalFactor) == 0x00021C, "Member 'UKuroVehicleMovementComponent::SpeedImpactHorizontalFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationImpactFactor) == 0x000220, "Member 'UKuroVehicleMovementComponent::RotationImpactFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxExtrutionDistance) == 0x000224, "Member 'UKuroVehicleMovementComponent::MaxExtrutionDistance' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, WaterDepth) == 0x000228, "Member 'UKuroVehicleMovementComponent::WaterDepth' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationRate) == 0x000230, "Member 'UKuroVehicleMovementComponent::RotationRate' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, Acceleration) == 0x00023C, "Member 'UKuroVehicleMovementComponent::Acceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateRotation) == 0x000250, "Member 'UKuroVehicleMovementComponent::LastUpdateRotation' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateLocation) == 0x000260, "Member 'UKuroVehicleMovementComponent::LastUpdateLocation' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateVelocity) == 0x00026C, "Member 'UKuroVehicleMovementComponent::LastUpdateVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateRotationVelocity) == 0x000278, "Member 'UKuroVehicleMovementComponent::LastUpdateRotationVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, PendingImpulseToApply) == 0x000284, "Member 'UKuroVehicleMovementComponent::PendingImpulseToApply' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, PendingForceToApply) == 0x000290, "Member 'UKuroVehicleMovementComponent::PendingForceToApply' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, PendingRotImpluseToApply) == 0x00029C, "Member 'UKuroVehicleMovementComponent::PendingRotImpluseToApply' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, AnalogInputModifier) == 0x0002A8, "Member 'UKuroVehicleMovementComponent::AnalogInputModifier' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSimulationTimeStep) == 0x00035C, "Member 'UKuroVehicleMovementComponent::MaxSimulationTimeStep' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSimulationIterations) == 0x000360, "Member 'UKuroVehicleMovementComponent::MaxSimulationIterations' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSimulationRotationIterations) == 0x000364, "Member 'UKuroVehicleMovementComponent::MaxSimulationRotationIterations' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxDepenetrationWithGeometry) == 0x000368, "Member 'UKuroVehicleMovementComponent::MaxDepenetrationWithGeometry' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxDepenetrationWithGeometryAsProxy) == 0x00036C, "Member 'UKuroVehicleMovementComponent::MaxDepenetrationWithGeometryAsProxy' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxDepenetrationWithPawn) == 0x000370, "Member 'UKuroVehicleMovementComponent::MaxDepenetrationWithPawn' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxDepenetrationWithPawnAsProxy) == 0x000374, "Member 'UKuroVehicleMovementComponent::MaxDepenetrationWithPawnAsProxy' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, CurrentRootMotion) == 0x000388, "Member 'UKuroVehicleMovementComponent::CurrentRootMotion' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RootMotionParams) == 0x0003C0, "Member 'UKuroVehicleMovementComponent::RootMotionParams' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, AnimRootMotionVelocity) == 0x000400, "Member 'UKuroVehicleMovementComponent::AnimRootMotionVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, DeferredUpdatedMoveComponent) == 0x000438, "Member 'UKuroVehicleMovementComponent::DeferredUpdatedMoveComponent' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, bForbiddenTickPose) == 0x000440, "Member 'UKuroVehicleMovementComponent::bForbiddenTickPose' has a wrong offset!");

}


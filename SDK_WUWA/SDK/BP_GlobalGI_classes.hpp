#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "KuroCurve_structs.hpp"
#include "E_Cloud_Presents_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalGI.BP_GlobalGI_C
// 0x0470 (0x2C40 - 0x27D0)
class ABP_GlobalGI_C final : public AKuroGlobalGI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x27D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneRayTracingGICaptureComponentCube* SceneRayTracingGICaptureComponentCube;             // 0x27D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   KuroVolumeCloudGlobal;                             // 0x27E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   RainOverrider;                                     // 0x27E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalHeightMapComponent*          KuroGlobalHeightMap;                               // 0x27F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CloudOcean;                                        // 0x27F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalColorMapComponent*           KuroGlobalColorMap;                                // 0x2800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MilkyWay;                                       // 0x2808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UiSceneRenderingComponent_C*        BP_UiSceneRenderingComponent;                      // 0x2810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              GlobalUiScenePostProcess;                          // 0x2818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ImposterManager;                                   // 0x2820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS6;                                  // 0x2828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS5;                                  // 0x2830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS4;                                  // 0x2838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS3;                                  // 0x2840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS2;                                  // 0x2848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS1;                                  // 0x2850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS;                                   // 0x2858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              LUTPostProcess;                                    // 0x2860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Stars;                                          // 0x2868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x2870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  GlobalPostProcessVolume;                           // 0x2878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SceneLight;                                        // 0x2880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoMoonLight;                                     // 0x2888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoSunLight;                                      // 0x2890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x2898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x28A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x28A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLightHorizontal;                          // 0x28B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrTimeOfDay;                                     // 0x28B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTODCycle;                                    // 0x28B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTOD;                                          // 0x28B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          __h___;                                            // 0x28BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_344F[0x1];                                     // 0x28BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TODCycleTime;                                      // 0x28BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SenenDirLightRot;                                  // 0x28C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MainLightAngleLimit;                               // 0x28CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGIEnable;                                        // 0x28D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ____________;                                      // 0x28D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3450[0x2];                                     // 0x28D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SM_______;                                         // 0x28D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Star3_r;                                           // 0x28D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SunLightExistTime;                                 // 0x28E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      MoonLightExistTime;                                // 0x28F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          _L_______;                                         // 0x2908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UISceneRendering;                                  // 0x2909(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRootGI;                                          // 0x290A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG____r____I;                                   // 0x290B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                         DEBUG__r____I__;                                   // 0x290C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDaysElapsed;                                  // 0x2910(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x2914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoonVisibleTime;                                   // 0x2918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __h_s_LensFlare;                                   // 0x2920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          S__H;                                              // 0x2921(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuntimeTimeEnable;                                 // 0x2922(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_3451[0x1];                                     // 0x2923(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightTickSecond;                               // 0x2924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightTickCounter;                              // 0x2928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUpdateMainLightDir;                           // 0x292C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3452[0x3];                                     // 0x292D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDir;                                           // 0x2930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __4__H;                                            // 0x2934(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3453[0x3];                                     // 0x2935(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempFogMaterial;                                   // 0x2938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TempFogDMI;                                        // 0x2940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SkyboxMaterial;                                    // 0x2948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunDiscColor;                                      // 0x2950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunScatterColor;                                   // 0x2960(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x2970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonDiscColor;                                     // 0x2974(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonScatterColor;                                  // 0x2984(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonSize;                                          // 0x2994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HorizonColor;                                      // 0x2998(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonFalloff;                                    // 0x29A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ZenithColor;                                       // 0x29AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtremWeatherWeight;                               // 0x29BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_TopColor;                                       // 0x29C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x29D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ST_TopWidth;                                       // 0x29E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3454[0x4];                                     // 0x29E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharMainLightCurve;                                // 0x29E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CharSkyLightCurve;                                 // 0x29F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCharCustomLighting;                             // 0x29F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3455[0x3];                                     // 0x29F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CharAmbientColor;                                  // 0x29FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CharSkinAmbientColor;                              // 0x2A0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3456[0x4];                                     // 0x2A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharShadowCurve;                                   // 0x2A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightFunctionMaterial;                             // 0x2A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunctionIntensity;                            // 0x2A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3457[0x4];                                     // 0x2A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LightFunctionDMI;                                  // 0x2A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___y_0h;                                           // 0x2A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_3458[0x7];                                     // 0x2A41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LensFlareMI;                                       // 0x2A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensFlareDMI;                                      // 0x2A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MobileLensFlareMI_Ghost;                           // 0x2A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Nadir_Color;                                       // 0x2A60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nadir_Falloff;                                     // 0x2A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Scatter_Size;                                  // 0x2A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Scatter_Size;                                 // 0x2A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3459[0x4];                                     // 0x2A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      StarsMaterial;                                     // 0x2A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold_Mobile;          // 0x2A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold;                 // 0x2A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindDirection;                               // 0x2A90(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindRightDirection;                          // 0x2A9C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG___y_0h__;                                    // 0x2AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345A[0x4];                                     // 0x2AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ControlTodTime_C*                   TodTimeController;                                 // 0x2AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealTimeOfDay;                                     // 0x2AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345B[0x4];                                     // 0x2ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Clouds_C*                           DynamicCloudsActor;                                // 0x2AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroDynamicCloudType                         LocalDynamicCloudsType;                            // 0x2AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345C[0x3];                                     // 0x2AC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainDensityChangeSpeed;                            // 0x2ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainDensity;                                       // 0x2AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnowDensity;                                       // 0x2AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainGravity;                                       // 0x2AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainGravityChangeSpeed;                            // 0x2ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainWindPower;                                     // 0x2AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainWindPowerChangeSpeed;                          // 0x2AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSpawnEffect;                                    // 0x2AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345D[0x3];                                     // 0x2AE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalSnowDensity;                                  // 0x2AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalRainDensity;                                  // 0x2AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalRainGravity;                                  // 0x2AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightShadowSupplement;                   // 0x2AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightReflectionAddIntensity;             // 0x2AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MobileLensFlareMI_Halo;                            // 0x2B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MobileLensFlareDMI_Ghost;                          // 0x2B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MobileLensFlareDMI_Halo;                           // 0x2B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             HeightMapTexture;                                  // 0x2B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeightMapUpdated;                                  // 0x2B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345E[0x3];                                     // 0x2B21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SunLightDirection;                                 // 0x2B24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsComponentsEnable;                                // 0x2B30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345F[0x7];                                     // 0x2B31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Last_LightFunction_Map;                            // 0x2B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               InitLightFunctionMap;                              // 0x2B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TODLightLoadingWait;                               // 0x2B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DayLightLoadingTime;                               // 0x2B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NightLightLoadingTime;                             // 0x2B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ComputeLightGridSkipFrames;                        // 0x2B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MilkyWayMaterial;                                  // 0x2B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ____Mn;                                            // 0x2B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3460[0x3];                                     // 0x2B61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DEBUG__r____I____;                                 // 0x2B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CallCloudChange;                                   // 0x2B68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKuroCurveFloat                        FogTImeControl;                                    // 0x2B78(0x0090)(Edit, BlueprintVisible)
	bool                                          Is_Editor_Update;                                  // 0x2C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableImposterUpdate;                              // 0x2C09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3461[0x2];                                     // 0x2C0A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Clouds_Change_CD;                                  // 0x2C0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time;                                // 0x2C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time_0;                              // 0x2C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ____p_e;                                           // 0x2C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UINeedLerpData;                                    // 0x2C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableLumen;                                      // 0x2C1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3462[0x5];                                     // 0x2C1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LightFunctionMaterial_seq;                         // 0x2C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Cloud_Rotation;                           // 0x2C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3463[0x3];                                     // 0x2C29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sequence_Cloud_Time_Control;                       // 0x2C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sequence_Cloud_Time_Offset;                        // 0x2C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3464[0x4];                                     // 0x2C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      VolumetricLightFunctionMaterial;                   // 0x2C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CallCloudChange__DelegateSignature(E_Cloud_Presents CloudPresents, float ChangeSpeed, bool IsinEditor);
	void ExecuteUbergraph_BP_GlobalGI(int32 EntryPoint);
	void OnKuroTickEditor(float DeltaTime);
	void OnKuroTick(float DeltaTime);
	void OnKuroEndUiScene();
	void OnKuroStartUiScene(const class FString& InName, class ULevel* InUILevel);
	void OnKuroSetRuntimeTime(float CurrentTime);
	void OnKuroRuntimeDestroy();
	void ReceiveBeginPlay();
	void OnKuroInit();
	void UserConstructionScript();
	void UpdateCharacterGI();
	void UpdateGIData(bool Skip_Lerp_Data);
	void UpdateFog();
	void Update_Env();
	void Get2SkyboxLerpWeight(float StartSetting, float EndSetting, float CurrentTime, float* Weight);
	void UpdateWind();
	void InitMaterials();
	void InitGICompoemnt();
	void Get_Scene_Light_Direction(struct FVector* LightDir);
	void UpdateSkyLight();
	void UpdateAtmosphere();
	void CalculateLightDirection(float Vertical, float Horizontal, float Time, struct FRotator* NewParam);
	void CalculateLightDirectionWithLimit(float V, float H, float Time, struct FRotator* NewParam);
	void InitFeature();
	void GetViewLocation(struct FVector* WorldPosition, bool* Suc);
	void UpdateTime();
	void Update_UI_Env();
	void Update_Main_Light();
	void Update_Light_Direction();
	void UpdateLightParameters();
	void UpdatePostProcessVolume();
	void GetLightDirectionFromVH(float Vertical, float Horizontal, struct FRotator* Result);
	void UpdateLightShaft();
	void Set_All_Components_States(bool IsEnable);
	void InitGI();
	void UpdateSkyDome();
	void _h();
	void MinusH();
	void ___0();
	void __0_Z();
	void _Z0_h();
	void _Z();
	void UpdateCloudCard(struct FKuroCloudCardSetting& CloudCardSetting);
	void Update_Day_Night_Data_Layer();
	void __();
	void _H_0();
	void _H();
	void Three_();
	void UpdateFlowmapSkybox();
	void UpdateMisc();
	void UpdateSkybox();
	void GetSkyboxDMI(class UMaterialInstanceDynamic** DMIRet);
	void UpdateClusteredStuff();
	void GetStarsDMI(class UMaterialInstanceDynamic** DMIRet);
	void SetLevelSequenceTimeControl(class ABP_ControlTodTime_C* TodTimeControl);
	void Update_Dynamic_Clouds();
	struct FVector EulerToForward(float Pitch, float Yaw);
	struct FLinearColor Clamp_Luminance(const struct FLinearColor& InColor, float Min, float Max);
	void GetParallaxCorrectCachedShadowDirection(struct FRotator* NewParam);
	void GetTODCharacterLighting(const struct FLinearColor& MainLight, float MainLightIntensity, const struct FLinearColor& Param_SkyLight, float SkyLightIntensity, struct FLinearColor* FrontSideLight, struct FLinearColor* BackSideLight);
	void GetParallaxCorrectCachedCrossFadeShadowDirection(struct FRotator* NewParam);
	void UpdateLightFunctions();
	void GetMilkyWayDMI(class UMaterialInstanceDynamic** DMIRet);
	void UpdateMilkWay(class UMaterialInstanceDynamic*& MilkyWay_DMI, struct FKuroMilkyWaySetting& CloudCardSetting);
	void UpdateBigWorld();
	void OnGlobalGITick();
	void UpdateEditor();
	void UpdateOcean();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalGI_C">();
	}
	static class ABP_GlobalGI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalGI_C>();
	}
};
static_assert(alignof(ABP_GlobalGI_C) == 0x000010, "Wrong alignment on ABP_GlobalGI_C");
static_assert(sizeof(ABP_GlobalGI_C) == 0x002C40, "Wrong size on ABP_GlobalGI_C");
static_assert(offsetof(ABP_GlobalGI_C, UberGraphFrame) == 0x0027D0, "Member 'ABP_GlobalGI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SceneRayTracingGICaptureComponentCube) == 0x0027D8, "Member 'ABP_GlobalGI_C::SceneRayTracingGICaptureComponentCube' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroVolumeCloudGlobal) == 0x0027E0, "Member 'ABP_GlobalGI_C::KuroVolumeCloudGlobal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainOverrider) == 0x0027E8, "Member 'ABP_GlobalGI_C::RainOverrider' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroGlobalHeightMap) == 0x0027F0, "Member 'ABP_GlobalGI_C::KuroGlobalHeightMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CloudOcean) == 0x0027F8, "Member 'ABP_GlobalGI_C::CloudOcean' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroGlobalColorMap) == 0x002800, "Member 'ABP_GlobalGI_C::KuroGlobalColorMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_MilkyWay) == 0x002808, "Member 'ABP_GlobalGI_C::SM_MilkyWay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, BP_UiSceneRenderingComponent) == 0x002810, "Member 'ABP_GlobalGI_C::BP_UiSceneRenderingComponent' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalUiScenePostProcess) == 0x002818, "Member 'ABP_GlobalGI_C::GlobalUiScenePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ImposterManager) == 0x002820, "Member 'ABP_GlobalGI_C::ImposterManager' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS6) == 0x002828, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS6' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS5) == 0x002830, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS5' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS4) == 0x002838, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS4' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS3) == 0x002840, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS3' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS2) == 0x002848, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS2' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS1) == 0x002850, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS1' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS) == 0x002858, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LUTPostProcess) == 0x002860, "Member 'ABP_GlobalGI_C::LUTPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Stars) == 0x002868, "Member 'ABP_GlobalGI_C::SM_Stars' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Skybox) == 0x002870, "Member 'ABP_GlobalGI_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalPostProcessVolume) == 0x002878, "Member 'ABP_GlobalGI_C::GlobalPostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SceneLight) == 0x002880, "Member 'ABP_GlobalGI_C::SceneLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, AtmoMoonLight) == 0x002888, "Member 'ABP_GlobalGI_C::AtmoMoonLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, AtmoSunLight) == 0x002890, "Member 'ABP_GlobalGI_C::AtmoSunLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SkyLight) == 0x002898, "Member 'ABP_GlobalGI_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightFog) == 0x0028A0, "Member 'ABP_GlobalGI_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSceneRoot) == 0x0028A8, "Member 'ABP_GlobalGI_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharacterLightHorizontal) == 0x0028B0, "Member 'ABP_GlobalGI_C::CharacterLightHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CurrTimeOfDay) == 0x0028B4, "Member 'ABP_GlobalGI_C::CurrTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, EnableTODCycle) == 0x0028B8, "Member 'ABP_GlobalGI_C::EnableTODCycle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, PauseTOD) == 0x0028B9, "Member 'ABP_GlobalGI_C::PauseTOD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, __h___) == 0x0028BA, "Member 'ABP_GlobalGI_C::__h___' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TODCycleTime) == 0x0028BC, "Member 'ABP_GlobalGI_C::TODCycleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SenenDirLightRot) == 0x0028C0, "Member 'ABP_GlobalGI_C::SenenDirLightRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightAngleLimit) == 0x0028CC, "Member 'ABP_GlobalGI_C::MainLightAngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsGIEnable) == 0x0028D0, "Member 'ABP_GlobalGI_C::IsGIEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ____________) == 0x0028D1, "Member 'ABP_GlobalGI_C::____________' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_______) == 0x0028D4, "Member 'ABP_GlobalGI_C::SM_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Star3_r) == 0x0028D8, "Member 'ABP_GlobalGI_C::Star3_r' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunLightExistTime) == 0x0028E8, "Member 'ABP_GlobalGI_C::SunLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonLightExistTime) == 0x0028F8, "Member 'ABP_GlobalGI_C::MoonLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, _L_______) == 0x002908, "Member 'ABP_GlobalGI_C::_L_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UISceneRendering) == 0x002909, "Member 'ABP_GlobalGI_C::UISceneRendering' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsRootGI) == 0x00290A, "Member 'ABP_GlobalGI_C::IsRootGI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG____r____I) == 0x00290B, "Member 'ABP_GlobalGI_C::DEBUG____r____I' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG__r____I__) == 0x00290C, "Member 'ABP_GlobalGI_C::DEBUG__r____I__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TotalDaysElapsed) == 0x002910, "Member 'ABP_GlobalGI_C::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonFade) == 0x002914, "Member 'ABP_GlobalGI_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonVisibleTime) == 0x002918, "Member 'ABP_GlobalGI_C::MoonVisibleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, __h_s_LensFlare) == 0x002920, "Member 'ABP_GlobalGI_C::__h_s_LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, S__H) == 0x002921, "Member 'ABP_GlobalGI_C::S__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RuntimeTimeEnable) == 0x002922, "Member 'ABP_GlobalGI_C::RuntimeTimeEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightTickSecond) == 0x002924, "Member 'ABP_GlobalGI_C::MainLightTickSecond' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightTickCounter) == 0x002928, "Member 'ABP_GlobalGI_C::MainLightTickCounter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ForceUpdateMainLightDir) == 0x00292C, "Member 'ABP_GlobalGI_C::ForceUpdateMainLightDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, WindDir) == 0x002930, "Member 'ABP_GlobalGI_C::WindDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, __4__H) == 0x002934, "Member 'ABP_GlobalGI_C::__4__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TempFogMaterial) == 0x002938, "Member 'ABP_GlobalGI_C::TempFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TempFogDMI) == 0x002940, "Member 'ABP_GlobalGI_C::TempFogDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SkyboxMaterial) == 0x002948, "Member 'ABP_GlobalGI_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunDiscColor) == 0x002950, "Member 'ABP_GlobalGI_C::SunDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunScatterColor) == 0x002960, "Member 'ABP_GlobalGI_C::SunScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunSize) == 0x002970, "Member 'ABP_GlobalGI_C::SunSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonDiscColor) == 0x002974, "Member 'ABP_GlobalGI_C::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonScatterColor) == 0x002984, "Member 'ABP_GlobalGI_C::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonSize) == 0x002994, "Member 'ABP_GlobalGI_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HorizonColor) == 0x002998, "Member 'ABP_GlobalGI_C::HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HorizonFalloff) == 0x0029A8, "Member 'ABP_GlobalGI_C::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ZenithColor) == 0x0029AC, "Member 'ABP_GlobalGI_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ExtremWeatherWeight) == 0x0029BC, "Member 'ABP_GlobalGI_C::ExtremWeatherWeight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_TopColor) == 0x0029C0, "Member 'ABP_GlobalGI_C::ST_TopColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_DomeColorTint) == 0x0029D0, "Member 'ABP_GlobalGI_C::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_TopWidth) == 0x0029E0, "Member 'ABP_GlobalGI_C::ST_TopWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharMainLightCurve) == 0x0029E8, "Member 'ABP_GlobalGI_C::CharMainLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharSkyLightCurve) == 0x0029F0, "Member 'ABP_GlobalGI_C::CharSkyLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UseCharCustomLighting) == 0x0029F8, "Member 'ABP_GlobalGI_C::UseCharCustomLighting' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharAmbientColor) == 0x0029FC, "Member 'ABP_GlobalGI_C::CharAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharSkinAmbientColor) == 0x002A0C, "Member 'ABP_GlobalGI_C::CharSkinAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharShadowCurve) == 0x002A20, "Member 'ABP_GlobalGI_C::CharShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionMaterial) == 0x002A28, "Member 'ABP_GlobalGI_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionIntensity) == 0x002A30, "Member 'ABP_GlobalGI_C::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionDMI) == 0x002A38, "Member 'ABP_GlobalGI_C::LightFunctionDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ___y_0h) == 0x002A40, "Member 'ABP_GlobalGI_C::___y_0h' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LensFlareMI) == 0x002A48, "Member 'ABP_GlobalGI_C::LensFlareMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LensFlareDMI) == 0x002A50, "Member 'ABP_GlobalGI_C::LensFlareDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareMI_Ghost) == 0x002A58, "Member 'ABP_GlobalGI_C::MobileLensFlareMI_Ghost' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Nadir_Color) == 0x002A60, "Member 'ABP_GlobalGI_C::Nadir_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Nadir_Falloff) == 0x002A70, "Member 'ABP_GlobalGI_C::Nadir_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sun_Scatter_Size) == 0x002A74, "Member 'ABP_GlobalGI_C::Sun_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Moon_Scatter_Size) == 0x002A78, "Member 'ABP_GlobalGI_C::Moon_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, StarsMaterial) == 0x002A80, "Member 'ABP_GlobalGI_C::StarsMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainDirectionLightUpdateThreshold_Mobile) == 0x002A88, "Member 'ABP_GlobalGI_C::MainDirectionLightUpdateThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainDirectionLightUpdateThreshold) == 0x002A8C, "Member 'ABP_GlobalGI_C::MainDirectionLightUpdateThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalWindDirection) == 0x002A90, "Member 'ABP_GlobalGI_C::GlobalWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalWindRightDirection) == 0x002A9C, "Member 'ABP_GlobalGI_C::GlobalWindRightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG___y_0h__) == 0x002AA8, "Member 'ABP_GlobalGI_C::DEBUG___y_0h__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TodTimeController) == 0x002AB0, "Member 'ABP_GlobalGI_C::TodTimeController' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RealTimeOfDay) == 0x002AB8, "Member 'ABP_GlobalGI_C::RealTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DynamicCloudsActor) == 0x002AC0, "Member 'ABP_GlobalGI_C::DynamicCloudsActor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LocalDynamicCloudsType) == 0x002AC8, "Member 'ABP_GlobalGI_C::LocalDynamicCloudsType' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainDensityChangeSpeed) == 0x002ACC, "Member 'ABP_GlobalGI_C::RainDensityChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainDensity) == 0x002AD0, "Member 'ABP_GlobalGI_C::RainDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SnowDensity) == 0x002AD4, "Member 'ABP_GlobalGI_C::SnowDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainGravity) == 0x002AD8, "Member 'ABP_GlobalGI_C::RainGravity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainGravityChangeSpeed) == 0x002ADC, "Member 'ABP_GlobalGI_C::RainGravityChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainWindPower) == 0x002AE0, "Member 'ABP_GlobalGI_C::RainWindPower' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainWindPowerChangeSpeed) == 0x002AE4, "Member 'ABP_GlobalGI_C::RainWindPowerChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CanSpawnEffect) == 0x002AE8, "Member 'ABP_GlobalGI_C::CanSpawnEffect' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalSnowDensity) == 0x002AEC, "Member 'ABP_GlobalGI_C::FinalSnowDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalRainDensity) == 0x002AF0, "Member 'ABP_GlobalGI_C::FinalRainDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalRainGravity) == 0x002AF4, "Member 'ABP_GlobalGI_C::FinalRainGravity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSkyLightShadowSupplement) == 0x002AF8, "Member 'ABP_GlobalGI_C::DefaultSkyLightShadowSupplement' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSkyLightReflectionAddIntensity) == 0x002AFC, "Member 'ABP_GlobalGI_C::DefaultSkyLightReflectionAddIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareMI_Halo) == 0x002B00, "Member 'ABP_GlobalGI_C::MobileLensFlareMI_Halo' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareDMI_Ghost) == 0x002B08, "Member 'ABP_GlobalGI_C::MobileLensFlareDMI_Ghost' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareDMI_Halo) == 0x002B10, "Member 'ABP_GlobalGI_C::MobileLensFlareDMI_Halo' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightMapTexture) == 0x002B18, "Member 'ABP_GlobalGI_C::HeightMapTexture' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightMapUpdated) == 0x002B20, "Member 'ABP_GlobalGI_C::HeightMapUpdated' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunLightDirection) == 0x002B24, "Member 'ABP_GlobalGI_C::SunLightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsComponentsEnable) == 0x002B30, "Member 'ABP_GlobalGI_C::IsComponentsEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Last_LightFunction_Map) == 0x002B38, "Member 'ABP_GlobalGI_C::Last_LightFunction_Map' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, InitLightFunctionMap) == 0x002B40, "Member 'ABP_GlobalGI_C::InitLightFunctionMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TODLightLoadingWait) == 0x002B48, "Member 'ABP_GlobalGI_C::TODLightLoadingWait' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DayLightLoadingTime) == 0x002B4C, "Member 'ABP_GlobalGI_C::DayLightLoadingTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, NightLightLoadingTime) == 0x002B50, "Member 'ABP_GlobalGI_C::NightLightLoadingTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ComputeLightGridSkipFrames) == 0x002B54, "Member 'ABP_GlobalGI_C::ComputeLightGridSkipFrames' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MilkyWayMaterial) == 0x002B58, "Member 'ABP_GlobalGI_C::MilkyWayMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ____Mn) == 0x002B60, "Member 'ABP_GlobalGI_C::____Mn' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG__r____I____) == 0x002B64, "Member 'ABP_GlobalGI_C::DEBUG__r____I____' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CallCloudChange) == 0x002B68, "Member 'ABP_GlobalGI_C::CallCloudChange' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FogTImeControl) == 0x002B78, "Member 'ABP_GlobalGI_C::FogTImeControl' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Is_Editor_Update) == 0x002C08, "Member 'ABP_GlobalGI_C::Is_Editor_Update' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, EnableImposterUpdate) == 0x002C09, "Member 'ABP_GlobalGI_C::EnableImposterUpdate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_CD) == 0x002C0C, "Member 'ABP_GlobalGI_C::Clouds_Change_CD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_Time) == 0x002C10, "Member 'ABP_GlobalGI_C::Clouds_Change_Time' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_Time_0) == 0x002C14, "Member 'ABP_GlobalGI_C::Clouds_Change_Time_0' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ____p_e) == 0x002C18, "Member 'ABP_GlobalGI_C::____p_e' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UINeedLerpData) == 0x002C19, "Member 'ABP_GlobalGI_C::UINeedLerpData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, bEnableLumen) == 0x002C1A, "Member 'ABP_GlobalGI_C::bEnableLumen' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionMaterial_seq) == 0x002C20, "Member 'ABP_GlobalGI_C::LightFunctionMaterial_seq' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Override_Cloud_Rotation) == 0x002C28, "Member 'ABP_GlobalGI_C::Override_Cloud_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sequence_Cloud_Time_Control) == 0x002C2C, "Member 'ABP_GlobalGI_C::Sequence_Cloud_Time_Control' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sequence_Cloud_Time_Offset) == 0x002C30, "Member 'ABP_GlobalGI_C::Sequence_Cloud_Time_Offset' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, VolumetricLightFunctionMaterial) == 0x002C38, "Member 'ABP_GlobalGI_C::VolumetricLightFunctionMaterial' has a wrong offset!");

}

